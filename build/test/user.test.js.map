{"version":3,"sources":["../../src/test/user.test.js"],"names":["should","chai","expect","use","chaiHttp","describe","it","done","request","app","post","send","goodSignUpDetail","end","err","res","have","status","body","be","a","property","to","equal","data","badSignUpDetail","error","badLoginDetails"],"mappings":"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","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport app from '../server';\r\nimport { goodSignUpDetail, badSignUpDetail, badLoginDetails } from './mockMessage/mockUser';\r\n\r\nconst { should, expect } = chai;\r\nshould();\r\n\r\nchai.use(chaiHttp);\r\n\r\ndescribe('User test', () => {\r\n  describe('SignUp a user', () => {\r\n    describe('User with good details', () => {\r\n      it('should return status code 201 and create a new user', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .send(goodSignUpDetail[0])\r\n          .end((err, res) => {\r\n            res.should.have.status(201);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('data');\r\n            expect(res.body.status).to.equal(201);\r\n            expect(res.body.data).to.be.a('array');\r\n            expect(res.body.data[0]).to.have.property('token');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('User with empty email', () => {\r\n      it('should return status code 400 and send error message', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .send(badSignUpDetail[0])\r\n          .end((err, res) => {\r\n            res.should.have.status(400);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('error');\r\n            expect(res.body.status).to.equal(400);\r\n            expect(res.body.error).to.equal('Email is required');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('User with empty firstname', () => {\r\n      it('should return status code 400 and send error message', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .send(badSignUpDetail[1])\r\n          .end((err, res) => {\r\n            res.should.have.status(400);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('error');\r\n            expect(res.body.status).to.equal(400);\r\n            expect(res.body.error).to.equal('firstname is required');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('User with empty lastname', () => {\r\n      it('should return status code 400 and send error message', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .send(badSignUpDetail[2])\r\n          .end((err, res) => {\r\n            res.should.have.status(400);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('error');\r\n            expect(res.body.status).to.equal(400);\r\n            expect(res.body.error).to.equal('lastname is required');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('User with empty password', () => {\r\n      it('should return status code 400 and send error message', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .send(badSignUpDetail[3])\r\n          .end((err, res) => {\r\n            res.should.have.status(400);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('error');\r\n            expect(res.body.status).to.equal(400);\r\n            expect(res.body.error).to.equal('Password is required');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('User signing up with a short password', () => {\r\n      it('should return status code 400 and send an error message', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .send(badSignUpDetail[9])\r\n          .end((err, res) => {\r\n            res.should.have.status(400);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('error');\r\n            expect(res.body.status).to.equal(400);\r\n            expect(res.body.error).to.equal('Password is too short');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('User with invalid firstname format', () => {\r\n      it('should return status code 400 and send error message', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .send(badSignUpDetail[4])\r\n          .end((err, res) => {\r\n            res.should.have.status(400);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('error');\r\n            expect(res.body.status).to.equal(400);\r\n            expect(res.body.error).to.equal('firstname format is invalid');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('User with invalid lastname format', () => {\r\n      it('should return status code 400 and send error message', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .send(badSignUpDetail[5])\r\n          .end((err, res) => {\r\n            res.should.have.status(400);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('error');\r\n            expect(res.body.status).to.equal(400);\r\n            expect(res.body.error).to.equal('lastname format is invalid');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('User with invalid email format', () => {\r\n      it('should return status code 400 and send error message', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .send(badSignUpDetail[6])\r\n          .end((err, res) => {\r\n            res.should.have.status(400);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('error');\r\n            expect(res.body.status).to.equal(400);\r\n            expect(res.body.error).to.equal('Email format is invalid');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('User with short email address', () => {\r\n      it('should return status code 400 and send error message', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .send(badSignUpDetail[7])\r\n          .end((err, res) => {\r\n            res.should.have.status(400);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('error');\r\n            expect(res.body.status).to.equal(400);\r\n            expect(res.body.error).to.equal('Email is too short');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('User signing up existing email', () => {\r\n      it('should return status code 400 and send an error message', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/signup')\r\n          .send(badSignUpDetail[8])\r\n          .end((err, res) => {\r\n            res.should.have.status(409);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('error');\r\n            expect(res.body.status).to.equal(409);\r\n            expect(res.body.error).to.equal('Email already exists');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Login a user', () => {\r\n    describe('User already signed up', () => {\r\n      it('should return status code 200 and login the user', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/login')\r\n          .send(goodSignUpDetail[0])\r\n          .end((err, res) => {\r\n            res.should.have.status(200);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('data');\r\n            expect(res.body.status).to.equal(200);\r\n            expect(res.body.data).to.be.a('array');\r\n            expect(res.body.data[0]).to.have.property('token');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('User not signed up', () => {\r\n      it('should return status code 401 and send an error message', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/login')\r\n          .send(badLoginDetails[0])\r\n          .end((err, res) => {\r\n            res.should.have.status(401);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('error');\r\n            expect(res.body.status).to.equal(401);\r\n            expect(res.body.error).to.equal('Authentication failed');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('Signed up user providing empty email', () => {\r\n      it('should return status code 400 and send an error message', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/login')\r\n          .send(badLoginDetails[1])\r\n          .end((err, res) => {\r\n            res.should.have.status(400);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('error');\r\n            expect(res.body.status).to.equal(400);\r\n            expect(res.body.error).to.equal('Email is required');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('Signed up user providing empty password', () => {\r\n      it('should return status code 400 and send an error message', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/login')\r\n          .send(badLoginDetails[2])\r\n          .end((err, res) => {\r\n            res.should.have.status(400);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('error');\r\n            expect(res.body.status).to.equal(400);\r\n            expect(res.body.error).to.equal('Password is required');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('Signed up user providing wrong password', () => {\r\n      it('should return status code 401 and send an error message', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/auth/login')\r\n          .send(badLoginDetails[3])\r\n          .end((err, res) => {\r\n            res.should.have.status(401);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('error');\r\n            expect(res.body.status).to.equal(401);\r\n            expect(res.body.error).to.equal('Incorrect login details');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n  });\r\n});\r\n"],"file":"user.test.js"}