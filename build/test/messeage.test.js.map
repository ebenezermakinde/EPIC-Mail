{"version":3,"sources":["../../src/test/messeage.test.js"],"names":["should","chai","expect","use","chaiHttp","describe","it","done","request","app","get","end","err","res","have","status","body","be","a","property","to","equal","data","post","send","validPostData","subject","message","invalidPost","error","id","delete","messages"],"mappings":"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","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport app from '../server';\r\n\r\n// Get our dummyData from utils folder\r\nimport messages from '../utils/dummyMessages';\r\n\r\n// Get our  mockMessages\r\nimport { validPostData, invalidPost } from './mockMessage/mockMessage';\r\n\r\nconst { should, expect } = chai;\r\nshould();\r\n\r\n// Use chaiHttp for Http verbs.\r\nchai.use(chaiHttp);\r\n\r\ndescribe('Emails test', () => {\r\n  describe('GET', () => {\r\n    describe('Get all recieved emails', () => {\r\n      it('should return status code 200 and get all emails', (done) => {\r\n        chai\r\n          .request(app)\r\n          .get('/api/v1/messages')\r\n          .end((err, res) => {\r\n            res.should.have.status(200);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('data');\r\n            expect(res.body.status).to.equal(200);\r\n            expect(res.body.data).to.be.a('array');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('Get one email', () => {\r\n      it('should return status code 200 and get one email', (done) => {\r\n        chai\r\n          .request(app)\r\n          .get('/api/v1/messages/1')\r\n          .end((err, res) => {\r\n            res.should.have.status(200);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('data');\r\n            expect(res.body.status).to.equal(200);\r\n            expect(res.body.data).to.be.a('array');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('Get all sent emails', () => {\r\n      it('should return status code 200 and get all sent emails', (done) => {\r\n        chai\r\n          .request(app)\r\n          .get('/api/v1/messages/sent')\r\n          .end((err, res) => {\r\n            res.should.have.status(200);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('data');\r\n            expect(res.body.status).to.equal(200);\r\n            expect(res.body.data).to.be.a('array');\r\n            expect(res.body.data[0].status).to.equal('sent');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('Get all unread emails', () => {\r\n      it('should return status code 200 and get all unread emails', (done) => {\r\n        chai\r\n          .request(app)\r\n          .get('/api/v1/messages/unread')\r\n          .end((err, res) => {\r\n            res.should.have.status(200);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('data');\r\n            expect(res.body.status).to.equal(200);\r\n            expect(res.body.data).to.be.a('array');\r\n            expect(res.body.data[0].status).to.equal('unread');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('POST', () => {\r\n    describe('Send a valid email', () => {\r\n      it('should return status code 200 and send email', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/messages')\r\n          .send(validPostData[0])\r\n          .end((err, res) => {\r\n            res.should.have.status(201);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('data');\r\n            expect(res.body.status).to.equal(201);\r\n            expect(res.body.data).to.be.a('array');\r\n            expect(res.body.data[0].subject).to.be.a('string');\r\n            expect(res.body.data[0].message).to.be.a('string');\r\n            expect(res.body.data[0].status).to.equal('sent');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('Sending an email with empty subject', () => {\r\n      it('should return status code 400 and send an error message', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/messages')\r\n          .send(invalidPost[0])\r\n          .end((err, res) => {\r\n            res.should.have.status(400);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('error');\r\n            expect(res.body.status).to.equal(400);\r\n            expect(res.body.error).to.equal('Subject is required');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('Sending an email with empty message', () => {\r\n      it('should return status code 400 and send an error message', (done) => {\r\n        chai\r\n          .request(app)\r\n          .post('/api/v1/messages')\r\n          .send(invalidPost[1])\r\n          .end((err, res) => {\r\n            res.should.have.status(400);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('error');\r\n            expect(res.body.status).to.equal(400);\r\n            expect(res.body.error).to.equal('Message is required');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('DELETE', () => {\r\n    describe('Delete an email id that is present', () => {\r\n      it('should return status code 200 and remove message', (done) => {\r\n        const id = 1;\r\n        chai\r\n          .request(app)\r\n          .delete(`/api/v1/messages/${id}`)\r\n          .send(messages)\r\n          .end((err, res) => {\r\n            res.should.have.status(200);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('data');\r\n            expect(res.body.status).to.equal(200);\r\n            expect(res.body.data[0].message).to.equal('Email has been successfully deleted');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('Delete an email id that is not present', () => {\r\n      it('should return status code 404 and send an error message', (done) => {\r\n        const id = 6;\r\n        chai\r\n          .request(app)\r\n          .delete(`/api/v1/messages/${id}`)\r\n          .send(messages)\r\n          .end((err, res) => {\r\n            res.should.have.status(404);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('status');\r\n            res.body.should.have.property('error');\r\n            expect(res.body.status).to.equal(404);\r\n            expect(res.body.error).to.equal('Email was not found');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n  });\r\n});\r\n"],"file":"messeage.test.js"}