{"version":3,"sources":["../../src/middleware/userValidator.js"],"names":["UserValidator","req","res","next","body","firstname","lastname","email","password","status","json","error","toLowerCase","trim","nameValidate","test","emailVerifier","length","duplicateEmail","users","find","user","foundUser"],"mappings":"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","sourcesContent":["import users from '../utils/dummyUser';\r\n\r\nclass UserValidator {\r\n  static signUpValidator(req, res, next) {\r\n    /* eslint-disable prefer-const */\r\n    let {\r\n      firstname,\r\n      lastname,\r\n      email,\r\n      password,\r\n    } = req.body;\r\n    if (!firstname) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'firstname is required',\r\n      });\r\n    }\r\n    firstname = firstname.toLowerCase().trim();\r\n    if (!lastname) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'lastname is required',\r\n      });\r\n    }\r\n    lastname = lastname.toLowerCase().trim();\r\n    if (!email) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Email is required',\r\n      });\r\n    }\r\n    const nameValidate = /^[a-zA-Z ]+$/;\r\n    if (!nameValidate.test(firstname)) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'firstname format is invalid',\r\n      });\r\n    }\r\n    if (!nameValidate.test(lastname)) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'lastname format is invalid',\r\n      });\r\n    }\r\n\r\n    email = email.toLowerCase().trim();\r\n    /* eslint-disable no-useless-escape */\r\n    const emailVerifier = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,4})+$/;\r\n    if (!emailVerifier.test(email)) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Email format is invalid',\r\n      });\r\n    }\r\n    if (email.length < 10 || email.length > 30) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Email is too short',\r\n      });\r\n    }\r\n    const duplicateEmail = users.find(user => user.email === email);\r\n    if (duplicateEmail) {\r\n      return res.status(409).json({\r\n        status: 409,\r\n        error: 'Email already exists',\r\n      });\r\n    }\r\n\r\n    // Password Validations\r\n    if (!password) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Password is required',\r\n      });\r\n    }\r\n    if (password.length < 8 || password.length > 15) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Password is too short',\r\n      });\r\n    }\r\n    req.body.email = email;\r\n    req.body.password = password;\r\n    return next();\r\n  }\r\n\r\n  static loginValidator(req, res, next) {\r\n    let { email, password } = req.body;\r\n    if (!email) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Email is required',\r\n      });\r\n    }\r\n    email = email.toLowerCase().trim();\r\n    const foundUser = users.find(user => user.email === email);\r\n    if (!foundUser) {\r\n      return res.status(401).json({\r\n        status: 401,\r\n        error: 'Authentication failed',\r\n      });\r\n    }\r\n\r\n    if (!password) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Password is required',\r\n      });\r\n    }\r\n\r\n    password = password.trim();\r\n    if (foundUser && password !== foundUser.password) {\r\n      return res.status(401).json({\r\n        status: 401,\r\n        error: 'Incorrect login details',\r\n      });\r\n    }\r\n    req.body.foundUser = foundUser;\r\n    req.body.password = password;\r\n    return next();\r\n  }\r\n}\r\n\r\nexport default UserValidator;\r\n"],"file":"userValidator.js"}